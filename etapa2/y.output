Terminals unused in grammar

    KW_CODE
    KW_IF
    KW_ELSE
    KW_WHILE
    KW_INPUT
    KW_PRINT
    KW_RETURN
    OPERATOR_LE
    OPERATOR_GE
    OPERATOR_EQ
    OPERATOR_DIF
    LIT_STRING
    TOKEN_ERROR
    '+'
    '-'
    '*'
    '/'


State 0 conflicts: 1 reduce/reduce


Grammar

    0 $accept: programa $end

    1 programa: ldecl_globais

    2 ldecl_globais: lista_decl
    3              | ldecl_proto

    4 lista_decl: declaracao lista_decl
    5           | %empty

    6 ldecl_proto: decl_proto ldecl_proto
    7            | %empty

    8 declaracao: tipo TK_IDENTIFIER '=' literal ';'
    9           | tipo TK_IDENTIFIER '[' LIT_INT ']' opcional ';'

   10 opcional: literal opcional
   11         | %empty

   12 decl_proto: tipo TK_IDENTIFIER '(' lparam ')' ';'

   13 lparam: param fim_param
   14       | %empty

   15 fim_param: ',' param fim_param
   16          | %empty

   17 param: tipo TK_IDENTIFIER

   18 tipo: KW_CHAR
   19     | KW_INT
   20     | KW_FLOAT

   21 literal: LIT_CHAR
   22        | LIT_INT
   23        | LIT_REAL


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 12
    ')' (41) 12
    '*' (42)
    '+' (43)
    ',' (44) 15
    '-' (45)
    '/' (47)
    ';' (59) 8 9 12
    '=' (61) 8
    '[' (91) 9
    ']' (93) 9
    error (256)
    KW_CHAR (258) 18
    KW_INT (259) 19
    KW_FLOAT (260) 20
    KW_CODE (261)
    KW_IF (262)
    KW_ELSE (263)
    KW_WHILE (264)
    KW_INPUT (265)
    KW_PRINT (266)
    KW_RETURN (267)
    OPERATOR_LE (268)
    OPERATOR_GE (269)
    OPERATOR_EQ (270)
    OPERATOR_DIF (271)
    TK_IDENTIFIER (272) 8 9 12 17
    LIT_INT (273) 9 22
    LIT_REAL (274) 23
    LIT_CHAR (275) 21
    LIT_STRING (276)
    TOKEN_ERROR (277)


Nonterminals, with rules where they appear

    $accept (34)
        on left: 0
    programa (35)
        on left: 1
        on right: 0
    ldecl_globais (36)
        on left: 2 3
        on right: 1
    lista_decl (37)
        on left: 4 5
        on right: 2 4
    ldecl_proto (38)
        on left: 6 7
        on right: 3 6
    declaracao (39)
        on left: 8 9
        on right: 4
    opcional (40)
        on left: 10 11
        on right: 9 10
    decl_proto (41)
        on left: 12
        on right: 6
    lparam (42)
        on left: 13 14
        on right: 12
    fim_param (43)
        on left: 15 16
        on right: 13 15
    param (44)
        on left: 17
        on right: 13 15
    tipo (45)
        on left: 18 19 20
        on right: 8 9 12 17
    literal (46)
        on left: 21 22 23
        on right: 8 10


State 0

    0 $accept: . programa $end

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3

    $end      reduce using rule 5 (lista_decl)
    $end      [reduce using rule 7 (ldecl_proto)]
    $default  reduce using rule 5 (lista_decl)

    programa       go to state 4
    ldecl_globais  go to state 5
    lista_decl     go to state 6
    ldecl_proto    go to state 7
    declaracao     go to state 8
    decl_proto     go to state 9
    tipo           go to state 10


State 1

   18 tipo: KW_CHAR .

    $default  reduce using rule 18 (tipo)


State 2

   19 tipo: KW_INT .

    $default  reduce using rule 19 (tipo)


State 3

   20 tipo: KW_FLOAT .

    $default  reduce using rule 20 (tipo)


State 4

    0 $accept: programa . $end

    $end  shift, and go to state 11


State 5

    1 programa: ldecl_globais .

    $default  reduce using rule 1 (programa)


State 6

    2 ldecl_globais: lista_decl .

    $default  reduce using rule 2 (ldecl_globais)


State 7

    3 ldecl_globais: ldecl_proto .

    $default  reduce using rule 3 (ldecl_globais)


State 8

    4 lista_decl: declaracao . lista_decl

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3

    $default  reduce using rule 5 (lista_decl)

    lista_decl  go to state 12
    declaracao  go to state 8
    tipo        go to state 13


State 9

    6 ldecl_proto: decl_proto . ldecl_proto

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3

    $default  reduce using rule 7 (ldecl_proto)

    ldecl_proto  go to state 14
    decl_proto   go to state 9
    tipo         go to state 15


State 10

    8 declaracao: tipo . TK_IDENTIFIER '=' literal ';'
    9           | tipo . TK_IDENTIFIER '[' LIT_INT ']' opcional ';'
   12 decl_proto: tipo . TK_IDENTIFIER '(' lparam ')' ';'

    TK_IDENTIFIER  shift, and go to state 16


State 11

    0 $accept: programa $end .

    $default  accept


State 12

    4 lista_decl: declaracao lista_decl .

    $default  reduce using rule 4 (lista_decl)


State 13

    8 declaracao: tipo . TK_IDENTIFIER '=' literal ';'
    9           | tipo . TK_IDENTIFIER '[' LIT_INT ']' opcional ';'

    TK_IDENTIFIER  shift, and go to state 17


State 14

    6 ldecl_proto: decl_proto ldecl_proto .

    $default  reduce using rule 6 (ldecl_proto)


State 15

   12 decl_proto: tipo . TK_IDENTIFIER '(' lparam ')' ';'

    TK_IDENTIFIER  shift, and go to state 18


State 16

    8 declaracao: tipo TK_IDENTIFIER . '=' literal ';'
    9           | tipo TK_IDENTIFIER . '[' LIT_INT ']' opcional ';'
   12 decl_proto: tipo TK_IDENTIFIER . '(' lparam ')' ';'

    '='  shift, and go to state 19
    '['  shift, and go to state 20
    '('  shift, and go to state 21


State 17

    8 declaracao: tipo TK_IDENTIFIER . '=' literal ';'
    9           | tipo TK_IDENTIFIER . '[' LIT_INT ']' opcional ';'

    '='  shift, and go to state 19
    '['  shift, and go to state 20


State 18

   12 decl_proto: tipo TK_IDENTIFIER . '(' lparam ')' ';'

    '('  shift, and go to state 21


State 19

    8 declaracao: tipo TK_IDENTIFIER '=' . literal ';'

    LIT_INT   shift, and go to state 22
    LIT_REAL  shift, and go to state 23
    LIT_CHAR  shift, and go to state 24

    literal  go to state 25


State 20

    9 declaracao: tipo TK_IDENTIFIER '[' . LIT_INT ']' opcional ';'

    LIT_INT  shift, and go to state 26


State 21

   12 decl_proto: tipo TK_IDENTIFIER '(' . lparam ')' ';'

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3

    $default  reduce using rule 14 (lparam)

    lparam  go to state 27
    param   go to state 28
    tipo    go to state 29


State 22

   22 literal: LIT_INT .

    $default  reduce using rule 22 (literal)


State 23

   23 literal: LIT_REAL .

    $default  reduce using rule 23 (literal)


State 24

   21 literal: LIT_CHAR .

    $default  reduce using rule 21 (literal)


State 25

    8 declaracao: tipo TK_IDENTIFIER '=' literal . ';'

    ';'  shift, and go to state 30


State 26

    9 declaracao: tipo TK_IDENTIFIER '[' LIT_INT . ']' opcional ';'

    ']'  shift, and go to state 31


State 27

   12 decl_proto: tipo TK_IDENTIFIER '(' lparam . ')' ';'

    ')'  shift, and go to state 32


State 28

   13 lparam: param . fim_param

    ','  shift, and go to state 33

    $default  reduce using rule 16 (fim_param)

    fim_param  go to state 34


State 29

   17 param: tipo . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 35


State 30

    8 declaracao: tipo TK_IDENTIFIER '=' literal ';' .

    $default  reduce using rule 8 (declaracao)


State 31

    9 declaracao: tipo TK_IDENTIFIER '[' LIT_INT ']' . opcional ';'

    LIT_INT   shift, and go to state 22
    LIT_REAL  shift, and go to state 23
    LIT_CHAR  shift, and go to state 24

    $default  reduce using rule 11 (opcional)

    opcional  go to state 36
    literal   go to state 37


State 32

   12 decl_proto: tipo TK_IDENTIFIER '(' lparam ')' . ';'

    ';'  shift, and go to state 38


State 33

   15 fim_param: ',' . param fim_param

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3

    param  go to state 39
    tipo   go to state 29


State 34

   13 lparam: param fim_param .

    $default  reduce using rule 13 (lparam)


State 35

   17 param: tipo TK_IDENTIFIER .

    $default  reduce using rule 17 (param)


State 36

    9 declaracao: tipo TK_IDENTIFIER '[' LIT_INT ']' opcional . ';'

    ';'  shift, and go to state 40


State 37

   10 opcional: literal . opcional

    LIT_INT   shift, and go to state 22
    LIT_REAL  shift, and go to state 23
    LIT_CHAR  shift, and go to state 24

    $default  reduce using rule 11 (opcional)

    opcional  go to state 41
    literal   go to state 37


State 38

   12 decl_proto: tipo TK_IDENTIFIER '(' lparam ')' ';' .

    $default  reduce using rule 12 (decl_proto)


State 39

   15 fim_param: ',' param . fim_param

    ','  shift, and go to state 33

    $default  reduce using rule 16 (fim_param)

    fim_param  go to state 42


State 40

    9 declaracao: tipo TK_IDENTIFIER '[' LIT_INT ']' opcional ';' .

    $default  reduce using rule 9 (declaracao)


State 41

   10 opcional: literal opcional .

    $default  reduce using rule 10 (opcional)


State 42

   15 fim_param: ',' param fim_param .

    $default  reduce using rule 15 (fim_param)
